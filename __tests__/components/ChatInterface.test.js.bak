// __tests__/components/ChatInterface.test.js - TESTS AVANZADOS
import React from 'react'
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import ChatInterface from '@/components/ChatInterface'
import { server } from '../mocks/server'
import { rest } from 'msw'

describe('ChatInterface', () => {
  const mockAgent = global.testUtils.mockAgent

  beforeEach(() => {
    // Reset fetch mock
    fetch.mockClear()
  })

  describe('Rendering', () => {
    it('renders chat interface with agent info', () => {
      render(<ChatInterface agent={mockAgent} />)

      expect(screen.getByText(mockAgent.name)).toBeInTheDocument()
      expect(screen.getByText(mockAgent.title)).toBeInTheDocument()
      expect(screen.getByText(mockAgent.emoji)).toBeInTheDocument()
    })

    it('displays welcome message on load', async () => {
      render(<ChatInterface agent={mockAgent} />)

      await waitFor(() => {
        expect(screen.getByText(mockAgent.welcome_message)).toBeInTheDocument()
      })
    })

    it('shows message counter when messages exist', async () => {
      render(<ChatInterface agent={mockAgent} />)

      // Wait for welcome message
      await waitFor(() => {
        expect(screen.getByText('1 mensajes')).toBeInTheDocument()
      })
    })
  })

  describe('User Interaction', () => {
    it('allows user to type message', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      await user.type(textarea, 'Hello test message')

      expect(textarea).toHaveValue('Hello test message')
    })

    it('auto-resizes textarea based on content', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      const initialHeight = textarea.style.height

      await user.type(textarea, 'Line 1\nLine 2\nLine 3')

      // Height should increase (exact value depends on implementation)
      expect(textarea.style.height).not.toBe(initialHeight)
    })

    it('sends message on Enter key press', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      await user.type(textarea, 'Test message')
      await user.keyboard('{Enter}')

      // Should display user message
      await waitFor(() => {
        expect(screen.getByText('Test message')).toBeInTheDocument()
      })
    })

    it('adds new line on Shift+Enter', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      await user.type(textarea, 'Line 1')
      await user.keyboard('{Shift>}{Enter}{/Shift}')
      await user.type(textarea, 'Line 2')

      expect(textarea.value).toBe('Line 1\nLine 2')
    })
  })

  describe('Message Sending', () => {
    it('sends message successfully and receives response', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      const sendButton = screen.getByRole('button')

      await user.type(textarea, 'Test message')
      await user.click(sendButton)

      // Should show loading state
      expect(screen.getByText('Escribiendo...')).toBeInTheDocument()

      // Should receive and display response
      await waitFor(
        () => {
          expect(screen.getByText(/Mock response for agent/)).toBeInTheDocument()
        },
        { timeout: 5000 }
      )
    })

    it('clears input after sending message', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      const sendButton = screen.getByRole('button')

      await user.type(textarea, 'Test message')
      await user.click(sendButton)

      expect(textarea).toHaveValue('')
    })

    it('handles API errors gracefully', async () => {
      // Override server to return error
      server.use(
        rest.post('/api/chat', (req, res, ctx) => {
          return res(ctx.status(500), ctx.json({ error: 'Server error' }))
        })
      )

      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      const sendButton = screen.getByRole('button')

      await user.type(textarea, 'Test message')
      await user.click(sendButton)

      await waitFor(() => {
        expect(screen.getByText(/Error tÃ©cnico/)).toBeInTheDocument()
      })
    })

    it('prevents sending empty messages', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      const sendButton = screen.getByRole('button')

      // Button should be disabled
      expect(sendButton).toBeDisabled()

      // Try clicking anyway
      await user.click(sendButton)

      // Should not send any request
      expect(fetch).not.toHaveBeenCalled()
    })
  })

  describe('Loading States', () => {
    it('shows typing indicator while loading', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      const sendButton = screen.getByRole('button')

      await user.type(textarea, 'Test message')
      await user.click(sendButton)

      // Should show typing indicator
      expect(screen.getByText('Escribiendo...')).toBeInTheDocument()

      // Should show animated dots
      expect(
        screen.getByTestId('typing-dots') || document.querySelector('.animate-bounce')
      ).toBeInTheDocument()
    })

    it('disables input while sending message', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      const sendButton = screen.getByRole('button')

      await user.type(textarea, 'Test message')
      await user.click(sendButton)

      // Textarea and button should be disabled
      expect(textarea).toBeDisabled()
      expect(sendButton).toBeDisabled()
    })
  })

  describe('Message Display', () => {
    it('displays messages with correct timestamps', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      await user.type(textarea, 'Test message')
      await user.keyboard('{Enter}')

      await waitFor(() => {
        // Should show timestamp (format: HH:MM)
        const timestamp = screen.getByText(/\d{2}:\d{2}/)
        expect(timestamp).toBeInTheDocument()
      })
    })

    it('scrolls to bottom when new message arrives', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      // Mock scrollIntoView
      const mockScrollIntoView = jest.fn()
      Element.prototype.scrollIntoView = mockScrollIntoView

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      await user.type(textarea, 'Test message')
      await user.keyboard('{Enter}')

      await waitFor(() => {
        expect(mockScrollIntoView).toHaveBeenCalled()
      })
    })
  })

  describe('Character Counter', () => {
    it('shows character count when typing', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      await user.type(textarea, 'Hello')

      expect(screen.getByText('5/2000')).toBeInTheDocument()
    })
  })

  describe('Accessibility', () => {
    it('has proper ARIA labels', () => {
      render(<ChatInterface agent={mockAgent} />)

      const textarea = screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)
      const sendButton = screen.getByRole('button')

      expect(textarea).toHaveAttribute('aria-label', expect.stringContaining('mensaje'))
      expect(sendButton).toHaveAttribute('aria-label', expect.stringContaining('enviar'))
    })

    it('supports keyboard navigation', async () => {
      const user = userEvent.setup()
      render(<ChatInterface agent={mockAgent} />)

      // Tab to textarea
      await user.tab()
      expect(screen.getByPlaceholderText(`Mensaje a ${mockAgent.name}...`)).toHaveFocus()

      // Tab to send button
      await user.tab()
      expect(screen.getByRole('button')).toHaveFocus()
    })
  })

  describe('Performance', () => {
    it('does not re-render unnecessarily', () => {
      const renderSpy = jest.fn()
      const MockComponent = () => {
        renderSpy()
        return <ChatInterface agent={mockAgent} />
      }

      const { rerender } = render(<MockComponent />)

      // Initial render
      expect(renderSpy).toHaveBeenCalledTimes(1)

      // Re-render with same props
      rerender(<MockComponent />)

      // Should not cause unnecessary re-renders
      expect(renderSpy).toHaveBeenCalledTimes(2) // Only one additional render
    })
  })
})
