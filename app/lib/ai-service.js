import Anthropic from '@anthropic-ai/sdk'

class AIService {
  constructor() {
    if (!process.env.CLAUDE_API_KEY) {
      console.warn('‚ö†Ô∏è CLAUDE_API_KEY not configured - using mock responses')
      this.client = null
    } else {
      this.client = new Anthropic({
        apiKey: process.env.CLAUDE_API_KEY,
      })
    }
  }

  async sendMessage(messages, systemPrompt, maxTokens = 2000) {
    // Fallback a respuesta mock si no hay API key
    if (!this.client) {
      return this.getMockResponse()
    }

    try {
      console.log('ü§ñ Calling Claude API...')

      const response = await this.client.messages.create({
        model: 'claude-sonnet-4-20250514',
        max_tokens: maxTokens,
        temperature: 0.7,
        system: systemPrompt,
        messages: messages.map((msg) => ({
          role: msg.role,
          content: msg.content,
        })),
      })

      console.log('‚úÖ Claude API response received')

      return {
        content: response.content[0].text,
        usage: response.usage,
      }
    } catch (error) {
      console.error('‚ùå Claude API Error:', error)

      // Fallback a respuesta de error amigable
      return {
        content:
          'Disculp√°, estoy teniendo problemas t√©cnicos en este momento. ¬øPod√©s intentar reformular tu consulta?',
        error: true,
      }
    }
  }

  getMockResponse() {
    const responses = [
      'Gracias por tu consulta. Estoy aqu√≠ para ayudarte con estrategias espec√≠ficas y recomendaciones pr√°cticas.',
      'Entiendo tu situaci√≥n. Bas√°ndome en mi experiencia, te sugiero que empecemos analizando...',
      'Excelente pregunta. Para darte la mejor recomendaci√≥n, necesito entender mejor tu contexto espec√≠fico.',
      'Esa es una consulta muy com√∫n y importante. Te puedo ayudar con un enfoque paso a paso.',
    ]

    return {
      content: responses[Math.floor(Math.random() * responses.length)],
      mock: true,
    }
  }
}

export const aiService = new AIService()
